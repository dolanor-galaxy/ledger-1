name: Pull Request - Open
on:
  pull_request:
    types: [assigned, opened, synchronize, reopened]
jobs:
  docs:
    name: 'Build Docs'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          wget https://github.com/swaggo/swag/releases/download/v1.7.4/swag_1.7.4_Linux_x86_64.tar.gz
          tar -zxvf swag_1.7.4_Linux_x86_64.tar.gz
      - run: ./swag init
      - uses: actions/upload-artifact@v2
        with:
          name: docs-dist
          path: ./docs/**
  build_control:
    name: 'Build Control'
    runs-on: ubuntu-latest
    steps:
      - name: Get latest release of Numary/Control
        uses: rez0n/actions-github-release@main
        id: control_release
        env:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: "numary/control"
          type: "stable"
      - run: curl -OL ${{ steps.control_release.outputs.browser_download_url }}
      - run: tar -zxvf numary-control-${{ steps.control_release.outputs.release }}.tar.gz
      - run: rm -rf numary-control-${{ steps.control_release.outputs.release }}.tar.gz
      - uses: actions/upload-artifact@v2
        with:
          name: control-dist
          path: ./**
  Test_sqlite:
    name: 'Test - SQLite'
    runs-on: ubuntu-latest
    needs:
      - build_control
      - docs
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: get deps
        run: go mod download
      - name: fetch numary control
        uses: actions/download-artifact@v2
        with:
          name: control-dist
          path: cmd/control/
      - name: run tests
        run: go test -v -coverpkg=./... -coverprofile=coverage.out -covermode=atomic ./...
      - name: Upload coverage to Codecov
        run: bash <(curl -s https://codecov.io/bash)
  Test_postgres:
    name: 'Test - PostgreSQL'
    runs-on: ubuntu-latest
    needs:
      - build_control
      - docs
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: ledger
          POSTGRES_PASSWORD: ledger
          POSTGRES_DB: ledger
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: get deps
        run: go mod download
      - name: fetch numary control
        uses: actions/download-artifact@v2
        with:
          name: control-dist
          path: cmd/control/
      - name: run tests
        run: go test -v -coverpkg=./... -coverprofile=coverage.out -covermode=atomic ./...
        env:
          NUMARY_STORAGE_DRIVER: "postgres"
          NUMARY_STORAGE_POSTGRES_CONN_STRING: "postgresql://ledger:ledger@127.0.0.1/ledger"
      - name: Upload coverage to Codecov
        run: bash <(curl -s https://codecov.io/bash)
  Bench_sqlite:
    name: 'Bench - SQLite'
    runs-on: ubuntu-latest
    needs:
      - build_control
      - docs
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: get deps
        run: go mod download
      - name: fetch numary control
        uses: actions/download-artifact@v2
        with:
          name: control-dist
          path: cmd/control/
      - name: run benchs
        run: go test -bench=Benchmark -run=^a ./... | tee output.txt
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Leger Bench for SQLite
          tool: 'go'
          output-file-path: output.txt
          fail-on-alert: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-on-alert: true
          benchmark-data-dir-path: dev/bench-sqlite
          auto-push: false
          comment-always: true
  Bench_postgres:
    name: 'Bench - PostgreSQL'
    runs-on: ubuntu-latest
    needs:
      - build_control
      - docs
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: ledger
          POSTGRES_PASSWORD: ledger
          POSTGRES_DB: ledger
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: get deps
        run: go mod download
      - name: fetch numary control
        uses: actions/download-artifact@v2
        with:
          name: control-dist
          path: cmd/control/
      - name: run tests
        run: go test -bench=Benchmark -run=^a ./... | tee output.txt
        env:
          NUMARY_STORAGE_DRIVER: "postgres"
          NUMARY_STORAGE_POSTGRES_CONN_STRING: "postgresql://ledger:ledger@127.0.0.1/ledger"
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Leger Bench for PostgreSQL
          tool: 'go'
          output-file-path: output.txt
          fail-on-alert: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-on-alert: true
          benchmark-data-dir-path: dev/bench-pgsql
          auto-push: false
          comment-always: true
  Lint:
      name: 'Lint'
      runs-on: ubuntu-latest
      steps:
        - uses: actions/setup-go@v2
          with:
            go-version: '1.16'
        - uses: actions/checkout@v2
        - uses: actions/cache@v2
          with:
            path: |
              ~/.cache/go-build
              ~/go/pkg/mod
            key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
            restore-keys: |
              ${{ runner.os }}-go-
        - name: get deps
          run: go mod download
        - name: run vet
          run: go vet .
  Build:
    name: 'Build'
    needs:
      - build_control
      - Test_sqlite
      - Test_postgres
      - Lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest ]
        include:
          - os: windows-latest
            file: windows
          - os: ubuntu-latest
            file: default
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: get deps
        run: go get
        env:
          CGO_ENABLED: 1
      - name: fetch numary control
        uses: actions/download-artifact@v2
        with:
          name: control-dist
          path: cmd/control/
      - name: fetch docs
        uses: actions/download-artifact@v2
        with:
          name: docs-dist
          path: docs/
      - name: OSXCross for CGO Support
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir ../../osxcross
          git clone https://github.com/plentico/osxcross-target.git ../../osxcross/target
      - name: Downgrade libssl
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo 'deb http://security.ubuntu.com/ubuntu bionic-security main' | sudo tee -a /etc/apt/sources.list
          sudo apt update && apt-cache policy libssl1.0-dev
          sudo apt-get install libssl1.0-dev
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: build --parallelism 4 --rm-dist --skip-validate --snapshot --config .github/.goreleaser.${{matrix.file}}.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v2
        with:
          name: build-${{matrix.file}}
          path: ./build/**